import java.nio.ByteBuffer;
import java.util.List;

public class ByteStreamUtils {
    
    static ByteBuffer integerCompactor;
    
    static {
        integerCompactor = ByteBuffer.allocate(8);
    }
    
    public static int popIntFromByteQueue(List<Byte> queue){
        int rVal = -1;
        integerCompactor.clear();
        integerCompactor.put(queue.remove(0));
        integerCompactor.put(queue.remove(0));
        integerCompactor.put(queue.remove(0));
        integerCompactor.put(queue.remove(0));
        integerCompactor.flip();
        rVal = integerCompactor.getInt();
        return rVal;
    }
    
    public static float popFloatFromByteQueue(List<Byte> queue){
        float rVal = -1;
        integerCompactor.clear();
        integerCompactor.put(queue.remove(0));
        integerCompactor.put(queue.remove(0));
        integerCompactor.put(queue.remove(0));
        integerCompactor.put(queue.remove(0));
        integerCompactor.flip();
        rVal = integerCompactor.getFloat();
        return rVal;
    }
    
    public static long popLongFromByteQueue(List<Byte> queue){
        long rVal = -1;
        integerCompactor.clear();
        integerCompactor.put(queue.remove(0));
        integerCompactor.put(queue.remove(0));
        integerCompactor.put(queue.remove(0));
        integerCompactor.put(queue.remove(0));
        integerCompactor.put(queue.remove(0));
        integerCompactor.put(queue.remove(0));
        integerCompactor.put(queue.remove(0));
        integerCompactor.put(queue.remove(0));
        integerCompactor.flip();
        rVal = integerCompactor.getLong();
        return rVal;
    }
    
    public static byte[] serializeIntToBytes(int i){
        byte[] rVal = new byte[4];
        integerCompactor.clear();
        integerCompactor.putInt(i);
        integerCompactor.flip();
        rVal[0] = integerCompactor.get();
        rVal[1] = integerCompactor.get();
        rVal[2] = integerCompactor.get();
        rVal[3] = integerCompactor.get();
        return rVal;
    }
    
    public static byte[] serializeFloatToBytes(float i){
        byte[] rVal = new byte[4];
        integerCompactor.clear();
        integerCompactor.putFloat(i);
        integerCompactor.flip();
        rVal[0] = integerCompactor.get();
        rVal[1] = integerCompactor.get();
        rVal[2] = integerCompactor.get();
        rVal[3] = integerCompactor.get();
        return rVal;
    }
    
    public static byte[] serializeLongToBytes(long i){
        byte[] rVal = new byte[8];
        integerCompactor.clear();
        integerCompactor.putLong(i);
        integerCompactor.flip();
        rVal[0] = integerCompactor.get();
        rVal[1] = integerCompactor.get();
        rVal[2] = integerCompactor.get();
        rVal[3] = integerCompactor.get();
        rVal[4] = integerCompactor.get();
        rVal[5] = integerCompactor.get();
        rVal[6] = integerCompactor.get();
        rVal[7] = integerCompactor.get();
        return rVal;
    }
}
